// Auto-generated. Do not edit!

// (in-package optimation_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class TrajectoryExecutionGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.velocityVector = null;
      this.frequenz = null;
      this.time = null;
      this.StartPose = null;
      this.GoalPose = null;
    }
    else {
      if (initObj.hasOwnProperty('velocityVector')) {
        this.velocityVector = initObj.velocityVector
      }
      else {
        this.velocityVector = [];
      }
      if (initObj.hasOwnProperty('frequenz')) {
        this.frequenz = initObj.frequenz
      }
      else {
        this.frequenz = 0.0;
      }
      if (initObj.hasOwnProperty('time')) {
        this.time = initObj.time
      }
      else {
        this.time = 0.0;
      }
      if (initObj.hasOwnProperty('StartPose')) {
        this.StartPose = initObj.StartPose
      }
      else {
        this.StartPose = new geometry_msgs.msg.Pose();
      }
      if (initObj.hasOwnProperty('GoalPose')) {
        this.GoalPose = initObj.GoalPose
      }
      else {
        this.GoalPose = new geometry_msgs.msg.Pose();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type TrajectoryExecutionGoal
    // Serialize message field [velocityVector]
    bufferOffset = _arraySerializer.float32(obj.velocityVector, buffer, bufferOffset, null);
    // Serialize message field [frequenz]
    bufferOffset = _serializer.float32(obj.frequenz, buffer, bufferOffset);
    // Serialize message field [time]
    bufferOffset = _serializer.float32(obj.time, buffer, bufferOffset);
    // Serialize message field [StartPose]
    bufferOffset = geometry_msgs.msg.Pose.serialize(obj.StartPose, buffer, bufferOffset);
    // Serialize message field [GoalPose]
    bufferOffset = geometry_msgs.msg.Pose.serialize(obj.GoalPose, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type TrajectoryExecutionGoal
    let len;
    let data = new TrajectoryExecutionGoal(null);
    // Deserialize message field [velocityVector]
    data.velocityVector = _arrayDeserializer.float32(buffer, bufferOffset, null)
    // Deserialize message field [frequenz]
    data.frequenz = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [time]
    data.time = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [StartPose]
    data.StartPose = geometry_msgs.msg.Pose.deserialize(buffer, bufferOffset);
    // Deserialize message field [GoalPose]
    data.GoalPose = geometry_msgs.msg.Pose.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 4 * object.velocityVector.length;
    return length + 124;
  }

  static datatype() {
    // Returns string type for a message object
    return 'optimation_msgs/TrajectoryExecutionGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'ea451a2ad70ed9c78ee392b0e39f6b47';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    float32[] velocityVector
    float32 frequenz
    float32 time
    geometry_msgs/Pose StartPose
    geometry_msgs/Pose GoalPose
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new TrajectoryExecutionGoal(null);
    if (msg.velocityVector !== undefined) {
      resolved.velocityVector = msg.velocityVector;
    }
    else {
      resolved.velocityVector = []
    }

    if (msg.frequenz !== undefined) {
      resolved.frequenz = msg.frequenz;
    }
    else {
      resolved.frequenz = 0.0
    }

    if (msg.time !== undefined) {
      resolved.time = msg.time;
    }
    else {
      resolved.time = 0.0
    }

    if (msg.StartPose !== undefined) {
      resolved.StartPose = geometry_msgs.msg.Pose.Resolve(msg.StartPose)
    }
    else {
      resolved.StartPose = new geometry_msgs.msg.Pose()
    }

    if (msg.GoalPose !== undefined) {
      resolved.GoalPose = geometry_msgs.msg.Pose.Resolve(msg.GoalPose)
    }
    else {
      resolved.GoalPose = new geometry_msgs.msg.Pose()
    }

    return resolved;
    }
};

module.exports = TrajectoryExecutionGoal;
