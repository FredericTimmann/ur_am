;; Auto-generated. Do not edit!


(when (boundp 'optimation_msgs::TrajectoryExecutionGoal)
  (if (not (find-package "OPTIMATION_MSGS"))
    (make-package "OPTIMATION_MSGS"))
  (shadow 'TrajectoryExecutionGoal (find-package "OPTIMATION_MSGS")))
(unless (find-package "OPTIMATION_MSGS::TRAJECTORYEXECUTIONGOAL")
  (make-package "OPTIMATION_MSGS::TRAJECTORYEXECUTIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude TrajectoryExecutionGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass optimation_msgs::TrajectoryExecutionGoal
  :super ros::object
  :slots (_velocityVector _frequenz _time _StartPose _GoalPose ))

(defmethod optimation_msgs::TrajectoryExecutionGoal
  (:init
   (&key
    ((:velocityVector __velocityVector) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:frequenz __frequenz) 0.0)
    ((:time __time) 0.0)
    ((:StartPose __StartPose) (instance geometry_msgs::Pose :init))
    ((:GoalPose __GoalPose) (instance geometry_msgs::Pose :init))
    )
   (send-super :init)
   (setq _velocityVector __velocityVector)
   (setq _frequenz (float __frequenz))
   (setq _time (float __time))
   (setq _StartPose __StartPose)
   (setq _GoalPose __GoalPose)
   self)
  (:velocityVector
   (&optional __velocityVector)
   (if __velocityVector (setq _velocityVector __velocityVector)) _velocityVector)
  (:frequenz
   (&optional __frequenz)
   (if __frequenz (setq _frequenz __frequenz)) _frequenz)
  (:time
   (&optional __time)
   (if __time (setq _time __time)) _time)
  (:StartPose
   (&rest __StartPose)
   (if (keywordp (car __StartPose))
       (send* _StartPose __StartPose)
     (progn
       (if __StartPose (setq _StartPose (car __StartPose)))
       _StartPose)))
  (:GoalPose
   (&rest __GoalPose)
   (if (keywordp (car __GoalPose))
       (send* _GoalPose __GoalPose)
     (progn
       (if __GoalPose (setq _GoalPose (car __GoalPose)))
       _GoalPose)))
  (:serialization-length
   ()
   (+
    ;; float32[] _velocityVector
    (* 4    (length _velocityVector)) 4
    ;; float32 _frequenz
    4
    ;; float32 _time
    4
    ;; geometry_msgs/Pose _StartPose
    (send _StartPose :serialization-length)
    ;; geometry_msgs/Pose _GoalPose
    (send _GoalPose :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float32[] _velocityVector
     (write-long (length _velocityVector) s)
     (dotimes (i (length _velocityVector))
       (sys::poke (elt _velocityVector i) (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
       )
     ;; float32 _frequenz
       (sys::poke _frequenz (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _time
       (sys::poke _time (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; geometry_msgs/Pose _StartPose
       (send _StartPose :serialize s)
     ;; geometry_msgs/Pose _GoalPose
       (send _GoalPose :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float32[] _velocityVector
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _velocityVector (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _velocityVector i) (sys::peek buf ptr- :float)) (incf ptr- 4)
     ))
   ;; float32 _frequenz
     (setq _frequenz (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _time
     (setq _time (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; geometry_msgs/Pose _StartPose
     (send _StartPose :deserialize buf ptr-) (incf ptr- (send _StartPose :serialization-length))
   ;; geometry_msgs/Pose _GoalPose
     (send _GoalPose :deserialize buf ptr-) (incf ptr- (send _GoalPose :serialization-length))
   ;;
   self)
  )

(setf (get optimation_msgs::TrajectoryExecutionGoal :md5sum-) "ea451a2ad70ed9c78ee392b0e39f6b47")
(setf (get optimation_msgs::TrajectoryExecutionGoal :datatype-) "optimation_msgs/TrajectoryExecutionGoal")
(setf (get optimation_msgs::TrajectoryExecutionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
float32[] velocityVector
float32 frequenz
float32 time
geometry_msgs/Pose StartPose
geometry_msgs/Pose GoalPose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :optimation_msgs/TrajectoryExecutionGoal "ea451a2ad70ed9c78ee392b0e39f6b47")


